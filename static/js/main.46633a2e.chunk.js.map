{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","buttons","toggle","values","output","operands","toggletheme","bind","handleChange","evaluate","this","setState","o","eval","e","target","name","theme","className","style","background","key","onClick","type","width","textAlign","placeholder","disabled","value","map","i","id","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"k3CAGMA,I,qBACJ,aAAYC,GAAQ,IAAD,6JACjB,qTAAMA,KAODC,MAAQ,CACXC,QANM,CACV,IAAI,IAAI,IAAI,SAAS,IAAI,IAAI,IAAI,cACjC,IAAI,IAAI,IAAI,cAAc,QAAQ,IAAI,IAAI,aAKtCC,QAAO,EACPC,OAAO,GACPC,OAAO,EACPC,SAAS,IAGf,EAAKC,YAAY,EAAKA,YAAYC,KAAjB,qJAEjB,EAAKC,aAAa,EAAKA,aAAaD,KAAlB,qJAElB,EAAKE,SAAS,EAAKA,SAASF,KAAd,qJApBO,E,2UAwBL,IACPL,EAAQQ,KAAKV,MAAbE,OACLQ,KAAKC,SAAS,CAACT,QAAQA,M,wCAIhBU,GAAG,IACLP,SAAUK,KAAKV,MAAfK,SACTK,KAAKC,SAAS,CAACN,SAASQ,KAAKR,c,mCAIhBS,GACb,OAAOA,EAAEC,OAAOC,MACd,IAAK,SAASN,KAAKC,SAAS,CAACP,OAAO,IAAIC,SAASK,KAAKV,MAAMK,SAAS,QACrE,MACA,IAAK,cAAcK,KAAKC,SAAS,CAACP,OAAO,IAAIC,SAASK,KAAKV,MAAMK,SAAS,QAC1E,MACA,IAAK,cAAcK,KAAKC,SAAS,CAACP,OAAO,IAAIC,SAASK,KAAKV,MAAMK,SAAS,QAC1E,MACA,IAAK,YAAYK,KAAKC,SAAS,CAACP,OAAO,IAAIC,SAASK,KAAKV,MAAMK,SAAS,QACxE,MACA,IAAK,QAAQK,KAAKC,SAAS,CAACP,OAAO,IAAIC,SAAS,KAChD,MACA,IAAK,IAAIK,KAAKD,SAASK,EAAEC,OAAOC,MAChC,MACA,QAAQ,IAAR,EACuBN,KAAKV,MAAdI,GADd,EACKC,SADL,EACcD,QACZM,KAAKC,SAAS,CAACP,OAAQA,EAASU,EAAEC,OAAOC,KAAKX,SAASK,KAAKV,MAAMK,SAASS,EAAEC,OAAOC,U,+BAK5E,IAAD,OACJC,EAAOP,KAAKV,MAAME,OADd,EAEaQ,KAAKV,MAArBC,EAFG,EAEHA,QAFG,EAEKG,OACZ,OACO,kEACEc,UAAU,kBACVC,MAAO,CACNC,WAAW,oBAAD,OAEPH,EACX,QACA,QAJkB,uBAYnB,qEACEC,UAAS,4BAGLD,EAAQ,OAAO,SAGnBI,IAAKJ,EACLK,QAAS,kBAAI,EAAKhB,gBAGtBW,EAED,cADA,cAMG,oEACEM,KAAK,OACLJ,MAAO,CACLK,MAAM,MACNC,UAAU,MACVL,WAAW,SAEbF,UAAU,iCACVF,KAAK,GACJU,YAAY,IACZC,UAAQ,EACTC,MAAOlB,KAAKV,MAAMK,WAIlB,kEAAKa,UAAU,MACbC,MAAO,CAACK,MAAM,QAIdvB,EAAQ4B,KAAI,SAACD,EAAME,GAAP,OACV,qEAAQC,GAAID,EACVT,IAAKS,EACLd,KAAMY,EAETV,UAAS,iCAGLD,EAAQ,OAAO,SAEnBK,QAAS,EAAKd,cAGVoB,Y,KAhIII,8CA4IHlC,2B,qKCnIKmC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAACzC,EAAA,EAAD,MAAS0C,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.46633a2e.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\nlet buttons=[\n  '1','2','3','Add(+)','4','5','6','Subtract(-)',\n  '7','8','9','Multiply(*)','Clear','0','=','Divide(/)'\n]\n\n    this.state = {\n      buttons,\n      toggle:false,\n      values:[],\n      output:0,\n      operands:''\n    };\n\nthis.toggletheme=this.toggletheme.bind(this)\n\nthis.handleChange=this.handleChange.bind(this)\n\nthis.evaluate=this.evaluate.bind(this)\n\n  }\n\n  toggletheme(){\n    let {toggle}=this.state;\n    this.setState({toggle:!toggle})\n  }\n\n\n  evaluate(o){\n    let {operands}=this.state\nthis.setState({operands:eval(operands)})\n\n  }\n\nhandleChange(e){\nswitch(e.target.name){\n  case 'Add(+)':this.setState({output:'+',operands:this.state.operands+' + '})\n  break;\n  case 'Subtract(-)':this.setState({output:'-',operands:this.state.operands+' - '})\n  break;\n  case 'Multiply(*)':this.setState({output:'*',operands:this.state.operands+' * '})\n  break;\n  case 'Divide(/)':this.setState({output:'/',operands:this.state.operands+' / '})\n  break;\n  case 'Clear':this.setState({output:'0',operands:''})\n  break;\n  case '=':this.evaluate(e.target.name)\n  break;\n  default:\n  let {operands,output}= this.state\n    this.setState({output: output + e.target.name,operands:this.state.operands+e.target.name})\n}\n}\n\n\n  render() {\n   let theme =this.state.toggle\n   let {buttons,output}=this.state\n    return (\n           <div\n             className=\"container-fluid\"\n             style={{\n              background:\n             `\n               ${theme?\n      'black'\n     :'white'\n    }\n               `\n             }}\n             >\n\n\n\n     <button\n       className={\n\n         ` toggle\n         ${theme ? 'dark':'light' }`\n\n       }\n       key={theme}\n       onClick={()=>this.toggletheme()}\n       >\n{\n  !theme?\n  'Dark Theme':\n  'Light Theme'\n}\n     </button>\n\n\n     <input\n       type=\"text\"\n       style={{\n         width:'60%',\n         textAlign:'end',\n         background:'white'\n       }}\n       className=\"form-control form-control-gray\"\n       name=\"\"\n        placeholder='0'\n        disabled\n       value={this.state.operands}\n         />\n\n\n       <div className=\"row\"\n         style={{width:'60%'}}\n         >\n\n         {\n         buttons.map((value,i)=>(\n           <button id={i}\n             key={i}\n             name={value}\n\n          className=\n          {\n            ` col-sm-3\n            ${theme ? 'dark':'light' }`\n          }\n          onClick={this.handleChange}\n\n          >\n             {value}\n           </button>\n         )\n       )\n         }\n\n         </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}